//
//  TSSWorker.m
//  TSSAgent
//
//  Created by Kevin Bradley on 1/22/12.
//  Copyright 2012 nito, LLC. All rights reserved.
//

#import "TSSWorker.h"


@implementation TSSWorker

@synthesize savedBuilds, queueNumber, currentIndex, currentBuild, queuedBuilds;

- (void)theWholeShebang
{
	/*
	 
	 1. grab available blob listing from cydia
	 2. get signing list from wherever
	 3. cycle through filtered array grabbing blob from apple then sending to cydia
	
	 */

	TSSManager *man = [[TSSManager alloc] initWithMode:kTSSFetchBlobFromApple];
	
	MyLogIt(@"synchronous blob check...\n\n");
	
	NSArray *blobs = [man _synchronousBlobCheck];
	
	MyLogIt(@"filtering list...\n\n");
	NSArray *filteredList = [self filteredList:blobs];
	
	MyLogIt(@"processing versions...\n\n");
	
	for (id fw in filteredList)
	{
		MyLogIt(@"fetching version: %@...\n\n", fw);
		
		NSString *theBlob = [man _synchronousReceiveVersion:fw];
		
		MyLogIt(@"pushing version: %@...\n\n", fw);
		
		NSString *returns = [man _synchronousPushBlob:theBlob];
		
		MyLogIt(@"%@\n\n", returns);
	}
	
	[man autorelease];
	
	LogIt(@"Done!!\n\n");
	
}

- (NSArray *)filteredList:(NSArray *)signedFW
{
	NSMutableArray *fetchList = [[NSMutableArray alloc] init];
	NSArray *avail = [TSSManager signableVersions]; //the versions we still report that can be signed from apple, from a plist we maintain
	NSArray *trimmedList = [self buildsFromList:signedFW]; //this SHOULD cuts the array down to single string objects of JUST the "build" key
	
	//	NSLog(@"trimmedList: %@", trimmedList);
	
	for (id currentFW in avail)
	{
		//see if the trimmed list contains our current build, if it does, dont add, otherwise, add.
		
		if (![trimmedList containsObject:currentFW])
		{
			[fetchList addObject:currentFW];
		}
		
	}
	
	return [fetchList autorelease];
}


- (void)fetchSavedFirmwares //start here
{
	//LOG_SELF
	TSSManager *theMan = [[TSSManager alloc] initWithMode:kTSSCydiaBlobListing];
	[theMan setDelegate:self];
		//[theMan _receiveVersion:@"9B5127c"];
	[theMan autorelease];
}

- (void)fetchSavedFirmwaresSolo //start here
{
	//LOG_SELF
	TSSManager *theMan = [[TSSManager alloc] initWithMode:kTSSCydiaBlobListingSolo];
	[theMan setDelegate:self];
	//[theMan _receiveVersion:@"9B5127c"];
	[theMan autorelease];
}


- (void)processorDidFinish:(id)processor withStatus:(int)status
{
	//LOG_SELF
		//NSLog(@"%@", [processor ecid]);
	
	id object = nil;
	id man2 = nil;
	
	
	switch ([processor mode]) {
			
		case kTSSSendBlobToCydia:
			
			NSLog(@"sending blob, dont try to process!: %@", [processor _returnDataAsString]);
			
				/* 
				 
				 here we need to see what index and count we are at for the queue, if we are not at the end we need to initiate the next round.
			
				 */

			
			//NSLog(@"currentBuild: %@ queuedBuilds: %@, count: %i", self.currentBuild, self.queuedBuilds, self.queueNumber);
			self.currentIndex++;
			
			if (self.currentIndex >= self.queueNumber)
			{
				//NSLog(@"we are at the end!");
			} else {
				processor = nil;
				
				//NSLog(@"still more to go!");
				
				
				self.currentBuild = [[self queuedBuilds] objectAtIndex:self.currentIndex];
				
				//NSLog(@"nextBuild: %@", self.currentBuild);
				
				TSSManager *theMan = [[TSSManager alloc] initWithMode:kTSSFetchBlobFromApple];
				[theMan setDelegate:self];
				[theMan _receiveVersion:self.currentBuild];
				[theMan autorelease];
			}
			
			return;
			
			
		case kTSSFetchBlobFromApple:
			
				//object = [TSSManager blobPathFromString:[processor _returnDataAsString] andEcid:[processor ecid]];
			
			
			//NSLog(@"currentBuild: %@", self.currentBuild);
			
			object = [TSSManager rawBlobFromResponse:[processor _returnDataAsString]];
			
			//object = [TSSManager blobPathFromString:[processor _returnDataAsString] andEcid:[processor ecid] andBuild:self.currentBuild];
				
				//NSLog(@"blob: %@", object);
				//man2 = [[TSSManager alloc] initWithMode:kTSSSendBlobToCydia];
				//[man2 setDelegate:self];
				//[man2 _pushBlob:object];
				//[man2 autorelease];
			[processor setMode:kTSSSendBlobToCydia];
			[processor _pushBlob:object];
			break;
			
		case kTSSFetchBlobFromCydia:
			
			//NSLog(@"kTSSFetchBlobFromCydia");
			break;
			
		case kTSSCydiaBlobListing:
			
				//NSLog(@"blob listing: %@", [processor _returnDataAsString]);
			object = [TSSManager blobArrayFromString:[processor _returnDataAsString]];
			
			//NSLog(@"blob list: %@", object);
			
			[self setSavedBuilds:object];
			[self fetchAvailableFirmwares];
			break;
			
		case kTSSCydiaBlobListingSolo:
			
			object = [TSSManager blobArrayFromString:[processor _returnDataAsString]];
			
			NSLog(@"%@", object);
			
			
			break;
	}
	
}

/*
 
 
 board = 16;
 build = 8C150;
 chip = 35120;
 firmware = "4.2";
 model = "AppleTV2,1";
 
 
 */

- (NSArray *)buildsFromList:(NSArray *)theList
{
	//LOG_SELF
	NSMutableArray *newArray = [[NSMutableArray alloc] init];
	
	for (id theItem in theList)
	{
		NSString *build = [theItem valueForKey:@"build"];
		[newArray addObject:build];
	}
	
	return [newArray autorelease];
}


- (void)fetchAvailableFirmwares
{
	//LOG_SELF
		//create a final list of versions that we will attempt to fetch from apple
	
	NSMutableArray *fetchList = [[NSMutableArray alloc] init];
	
	NSArray *avail = [TSSManager signableVersions]; //the versions we still report that can be signed from apple, from a plist we maintain
	
	NSArray *signedFW = self.savedBuilds; //we create this list earlier, this array has full dictionaries
	
	//NSLog(@"signedFw: %@", signedFW);
	
	NSArray *trimmedList = [self buildsFromList:signedFW]; //this SHOULD cuts the array down to single string objects of JUST the "build" key
//	NSLog(@"trimmedList: %@", trimmedList);
	
	for (id currentFW in avail)
	{
			//see if the trimmed list contains our current build, if it does, dont add, otherwise, add.
		
	
		if (![trimmedList containsObject:currentFW])
		{
			[fetchList addObject:currentFW];
		}
		
	}
	
	self.queuedBuilds = [fetchList autorelease];
	self.queueNumber = [fetchList count];
	self.currentIndex = 0;
	self.currentBuild = [fetchList objectAtIndex:0];
		//cycle through these firmwares and fetch the blob from apple then send it to cydia
	
//	NSLog(@"currentBuild: %@ queuedBuilds: %@, count: %i", self.currentBuild, self.queuedBuilds, self.queueNumber);
	
	for (id fw in self.queuedBuilds)
	{
		TSSManager *theMan = [[TSSManager alloc] initWithMode:kTSSFetchBlobFromApple];
		[theMan setDelegate:self];
		[theMan _receiveVersion:self.currentBuild];
		[theMan autorelease];
	}
	
	
}

- (void)dealloc
{
	[savedBuilds release];
	[currentBuild release];
	[super dealloc];
}

void MyLogIt (NSString *format, ...)
{
    va_list args;
	
    va_start (args, format);
	
    NSString *string;
	
    string = [[NSString alloc] initWithFormat: format  arguments: args];
	
    va_end (args);
	
    printf ("%s", [string UTF8String]);
	
    [string release];
	
} // LogIt

@end
